/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/imtiaz246/sample-cntroller/pkg/apis/cho.me/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FooServerLister helps list FooServers.
// All objects returned here must be treated as read-only.
type FooServerLister interface {
	// List lists all FooServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.FooServer, err error)
	// FooServers returns an object that can list and get FooServers.
	FooServers(namespace string) FooServerNamespaceLister
	FooServerListerExpansion
}

// fooServerLister implements the FooServerLister interface.
type fooServerLister struct {
	indexer cache.Indexer
}

// NewFooServerLister returns a new FooServerLister.
func NewFooServerLister(indexer cache.Indexer) FooServerLister {
	return &fooServerLister{indexer: indexer}
}

// List lists all FooServers in the indexer.
func (s *fooServerLister) List(selector labels.Selector) (ret []*v1beta1.FooServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FooServer))
	})
	return ret, err
}

// FooServers returns an object that can list and get FooServers.
func (s *fooServerLister) FooServers(namespace string) FooServerNamespaceLister {
	return fooServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FooServerNamespaceLister helps list and get FooServers.
// All objects returned here must be treated as read-only.
type FooServerNamespaceLister interface {
	// List lists all FooServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.FooServer, err error)
	// Get retrieves the FooServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.FooServer, error)
	FooServerNamespaceListerExpansion
}

// fooServerNamespaceLister implements the FooServerNamespaceLister
// interface.
type fooServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FooServers in the indexer for a given namespace.
func (s fooServerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FooServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FooServer))
	})
	return ret, err
}

// Get retrieves the FooServer from the indexer for a given namespace and name.
func (s fooServerNamespaceLister) Get(name string) (*v1beta1.FooServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("fooserver"), name)
	}
	return obj.(*v1beta1.FooServer), nil
}
